include "./raft_edb.ded";
include "./leader_elect.ded";

//re-direct client request to follower to be handled by leader
clireq(Neighbor, Pload, Reqindex) :- role(Node, "F"), clireq(Node, Pload, Reqindex), node(Node, Neighbor), role(Neighbor, "L");
min_req(Node, min<Reqindex>) :- clireq(Node, _, Reqindex), role(Node, "L");
extract_req(Node, Pload, Reqindex)@next :- clireq(Node, Pload, Reqindex), min_req(Node, Reqindex), notin del_req(Node, Pload, Reqindex);
del_req(Node, Pload, Reqindex)@next :- clireq(Node, Pload, Reqindex), min_req(Node, Reqindex);

// Increment index on leader and log request
nextindx(Node, Index)@next :- nextindx(Node, Index), notin extract_req(_, _,_);
nextindx(Node, Index+1)@next :- nextindx(Node, Index), extract_req(_, _, _);
log(Node, Index, Term, Pload):- extract_req(Node, Pload, Reqindex), term( Node, Term), nextindx(Node, Index);
log(Node, Index, Term, Pload)@next :- log(Node, Index, Term, Pload), notin overwrite_rewind(Node, Index, Term, _,_, _);

//Propagate payload to other nodes, assume term and index match. Record
//acknowledgements. Term,the last variable,  is an intermediate value in int_append_entry
int_append_entry(Neighbor, Index, Term, Pload, Index-1, Term) :- role(Node, "L"), log(Node, Index, Term, Pload), node(Node, Neighbor), notin ack(Leader, Neighborid, Index, Term, Pload), nodeid(Neighbor, Neighborid),  Index > 1;// log(Node, Index-1, Prevterm, Data); 
append_entry(Node, Index, Term, Pload, Previndex, Prevterm)@async :- int_append_entry(Node, Index, Term, Pload, Previndex, _), log(Leader, Previndex, Prevterm, _), role(Leader, "L"); 
append_entry(Neighbor, Index, Term, Pload, 0, 0)@async :- role(Node, "L"), log(Node, Index, Term, Pload), node(Node, Neighbor), notin ack(Leader, Neighborid, Index, Term, Pload), nodeid(Neighbor, Neighborid), Index==1;

//check for log matching property
node_not_current(Node, Index, Curterm) :- append_entry(Node, Index, Curterm, _, _, _), term(Node, Term), Term!=Curterm;

// If this is the first entry, logs match vacuously
log_match(Node, Index, Term, Pload) :- append_entry(Node, Index, Term, Pload, Previndex, Prevterm), notin node_not_current(Node, Index, Term), Prevterm==0, Previndex==0;

//When logs match - easy case - i should have known this would jinx it :(
log_match(Node, Index, Term, Pload) :- append_entry(Node, Index, Term, Pload, Previndex, Prevterm), Previndex!=0, role(Leader, "L"), log(Leader, Previndex, Prevterm, Pload1), log(Node, Previndex, Prevterm, Pload2), Pload1==Pload2, notin node_not_current(Node, Index, Term);

//Logs do not match - overwrite on follower
retain_log_entry(Node, Index+1, Term, Pload)@next :- append_entry(Node, Index, Term, Pload, _, _), notin log_match(Node, Term, Index, Pload);
retain_log_entry(Node, Index+1, Term, Pload)@next :- retain_log_entry(Node, Index, Term, Pload), notin log_match(Node, Term, Index, Pload);

overwrite_rewind(Node, Previndex, Prevterm, Pload, 0,0):- append_entry(Node, Index, Term,_, Previndex, Prevterm), notin overwrite_log_ack(Leader, Node, Term, Index, Pload), notin log_match(Node, Index, Term,  _), role(Leader, "L"), log(Leader, Previndex, PrevTerm, Pload), Previndex==1;
// Term, the last variable, is a placeholder value in int_overwrite_rewind log
int_overwrite_rewind(Node, Previndex, Prevterm, Pload, Previndex-1, Term):- append_entry(Node, Index, Term,_, Previndex, Prevterm), notin overwrite_log_ack(Leader, Node, Term, Index, Pload), notin log_match(Node, Index, Term, _), role(Leader, "L"), log(Leader, Previndex, PrevTerm, Pload), Previndex > 1;
overwrite_rewind(Node, Index, Term, Pload, Previndex, Corrterm):- int_overwrite_rewind(Node, Index, Term, Pload, Previndex, _), role(Leader, "L"),  log(Leader, Previndex, Corrterm, _);
log(Node, Index, Term, Pload) :- overwrite_rewind(Node, Index, Term, Pload,_, _);
log(Node, Index, Term, Pload)@next :- log(Node, Term, Index, Pload), overwrite_rewind(Node, Index, Term, Pload,_, _), notin overwrite_log_ack(Leader, Node, Index,Term, Pload), role(Leader, "L");
overwrite_log_ack(Leader, Node, Index, Term, Pload)@async :- log(Node, Index, Term, Pload), role(Leader, "L"), overwrite_rewind(Node, Index, Term, Pload,_,_);

log_match(Node, Index, Term, Pload) :- overwrite_rewind(Node, _, _, _, Previndex, Prevterm), Previndex==0, Prevterm==0, nextindx(Node, Index), term(Node, Term), retain_log_entry(Node, Index, Term, Pload);
log_match(Node, Index-1, Term, Pload) :- overwrite_rewind(Node, _, _, _, Previndex, Prevterm), role(Leader, "L"), log(Leader, Previndex, Prevterm, Pload1), log(Node, Previndex, Prevterm, Pload2), Pload1==Pload2, nextindx(Node, Index), term(Node, Term), retain_log_entry(Node, Index, Term, Pload);
overwrite_rewind(Node, Previndex, Prevterm, Pload1, 0, 0) :- overwrite_rewind(Node,Index, Term, _, Previndex, Prevterm), role(Leader, "L"), log(Leader, Previndex, Prevterm, Pload1), log(Node, Previndex, Prevterm, Pload2), Pload1!=Pload2, Previndex==1;
//Thelastvariable,Term and Pload1 is a placeholder
int_overwrite_rewind(Node, Previndex, Prevterm, Pload1, Previndex-1, Term) :- overwrite_rewind(Node,Index, Term, _, Previndex, Prevterm), role(Leader, "L"), log(Leader, Previndex, Prevterm, Pload1), log(Node, Previndex, Prevterm, Pload2), Pload1!=Pload2, Previndex>1;
overwrite_rewind(Node, Index, Term, Pload, Previndex, Prevterm) :- int_overwrite_rewind(Node,Index, Term, _, Previndex, _), role(Leader, "L"), log(Leader, Previndex, Prevterm, Pload);

//log_match says its ok to now replicate index, term on all followers
log(Node, Index, Term, Pload) :- log_match(Node, Index, Term, Pload);
ack(Leader, Nodeid, Index, Term, Pload)@async :- log(Node, Index, Term, Pload), notin ack(Leader, Nodeid, Index, Term, Pload), node(Node, Leader), role(Leader,"L"), nodeid(Node, Nodeid);
ack(Leader, Nodeid, Index, Term, Pload)@next :- ack(Leader, Nodeid, Index, Term, Pload);

//pipeline acks
ack_pipe(Leader, min<Nodeid>, Index, Term) :- ack(Leader, Nodeid, Index, Term, _), notin del_ack_pipe(Leader, Nodeid, Index, Term);// nextindx(Leader, Leaderindx), Leaderindx > Index;
del_ack_pipe(Leader, Nodeid, Index, Term)@next :- ack_pipe(Leader, Nodeid, Index, Term);
del_ack_pipe(Leader, Nodeid, Index, Term)@next :- del_ack_pipe(Leader, Nodeid, Index, Term);

//Based on reaching quorum, commit
quorum(Node, Term, Index, 1) :- role(Node, "L"), term( Node, Term), nextindx(Node, Index), extract_req(Node, _, _);
quorum(Node, Term, Index, Value)@next :- quorum(Node, Term, Index, Value), notin ack_pipe(Node, _, Index, Term);
quorum(Leader,Term,Index,Value+1)@next :- quorum(Leader, Term, Index, Value), ack_pipe(Leader, Nodeid, Index, Term), notin del_ack_pipe(Leader, Nodeid, Index, Term);

system("n",5)@1;
system(Number, Value)@next :- system(Number, Value);

to_commit(Node, Term, Index) :- quorum(Node, Term, Index, Numacks), Numacks > 2, commitindex(Node, Lastindx), Index == Lastindx + 1;
commitindex(Neighbor, Index)@next :- commitindex(Neighbor, Index), node(Node, Neighbor), role(Node, "L"), notin to_commit(Node, Term, Newindex);
commitindex(Node, Index)@next :- commitindex(Node, Index), role(Node, "L"), notin to_commit(Node, Term, Newindex);
commitindex(Neighbor, Newindex)@next :- commitindex(Neighbor, Index), node(Node, Neighbor), role(Node, "L"), to_commit(Node, Term, Newindex), Newindex == Index + 1;
commitindex(Node, Newindex)@next :- commitindex(Node, Index), role(Node, "L"), to_commit(Node, Term, Newindex),Newindex == Index +1;


