// Maintain knowledge of primary across time
primary(G, L)@next :- group(G, G), primary(G, L), member(G, L), notin promote(G, _);
primary(G, Node)@next :- group(G, G), promote(G, Node);
primary(M, L)@next :- primary(G, L), member(G, M), member(G, L), group(G, G);
primary(C, L)@next :- primary(G, L), client(G, C), member(G, L), group(G, G);

client(G, C)@next :- clients(C), group(C, G);

// Primry promotion, with the node with the max nodieid being promoted. This is the reverse order to the order in which staggered replica writes 
// are propagated.
promote(G, Node) :- group(G, G), max_nodeid(G, Nodeid), nodeid(G, Node, Nodeid), primary(G, Primary), Primary !=Node;
promote(G, Node) :- group(G, G), max_nodeid(G, Nodeid), nodeid(G, Node, Nodeid), notin primary(G, _);

// When a node crashes, the global process "G" peeks into the crash table and sends out a view change
// message. The member list is only updated on receiving a view_change message. Else, the member list 
// is maintained as is.
view_change(G, M)@next :- group(G, G), member(G, M), M != G, now(G, Now), crash(G, Other, Time), Now == Time, notin crash(G, M, Time);
member(G, M)@next :- view_change(G, M);
member(G, M)@next :- group(G, G), member(G, M), notin view_change(G, _);

// view_change_message is the mechanism in which non-global processes learn about changes to the
// in-sync replica set
view_change_message(M, N)@async :- group(G, G), view_change(G, M), view_change(G, N), M != G, N != G;
view_change_message(C, M)@async :- group(G, G), view_change(G, M), client(G, C), M != G;
member(M, N)@next :- view_change_message(M, N);
member(M, N)@next :- member(M, N), M != "G",  notin view_change_message(M, _);

