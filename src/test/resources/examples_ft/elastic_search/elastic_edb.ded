// replica init
// The "group" relation specifies all prcesses that can ever be part of the group
group("n1", "M")@1;
group("n2", "M")@1;
group("n3", "M")@1;
group("C", "M")@1;
group("M", "M")@1;
group(M, G)@next :- group(M, G);
group(M, "M") :- 
		cchange(M, "A", "M"),
		notin group(M, "M");

//Used as part of initialisation logic
begin("n1")@1;
begin("n2")@1;
begin("n3")@1;
begin("M")@1;

// Nodes are assigned nodeids at the beginning of each run
nodeid("M", "n1", 1)@1;
nodeid("M", "n2", 2)@1;
nodeid("M", "n3", 3)@1;
nodeid("n1", "n1", 1)@1;
nodeid("n1", "n2", 2)@1;
nodeid("n1", "n3", 3)@1;
nodeid("n2", "n1", 1)@1;
nodeid("n2", "n2", 2)@1;
nodeid("n2", "n3", 3)@1;
nodeid("n3", "n1", 1)@1;
nodeid("n3", "n2", 2)@1;
nodeid("n3", "n3", 3)@1;
nodeid(Node1, Node2, Nodeid)@next :- nodeid(Node1, Node2, Nodeid);

// client init
clients("C")@1;
clients(C)@next :- clients(C);

// "primary" designates the primary in the cluster.
// "in_sync" represents the in-sync replica set at any instant of time
primary("M", "n1")@1;
primary("n1", "n1")@1;
primary("n2", "n1")@1;
primary("n3", "n1")@1;
primary("C", "n1")@1;

// Primary node is the first node to be part of ISR
in_sync("M", "n1")@1;

// write stream.  
write_request_outgoing("C", "Data1", "n1", 1)@2;
write_request_outgoing("C", "Data2", "n2", 2)@7;

// Maintain sequence numbers
seq("n1", 1)@1;
seq("n2", 1)@1;
seq("n3", 1)@1;
seq(Node, Seq)@next :-
                        in_sync(Node, Node),
                        notin primary(Node, Node),
                        seq(Node, Seq),
                        notin history(Node, _, _, _);

seq(Node, Seq+1)@next :-
                        in_sync(Node, Node),
                        notin primary(Node, Node),
                        history(Node, _, _, _),
                        max_history(Node, Seq);

max_history(Node, max<Seq>) :-
                        in_sync(Node, Node),
                        history(Node, _, _, Seq);

term("M", 1)@1;
term("n1", 1)@1;
term("n2", 1)@1;
term("n3", 1)@1;
term(Node, Term)@next :-
                        term(Node, Term),
                        notin update_term(Node, _);

term(Node, Updated)@next :- update_term(Node, Updated);

update_term(G, Term+1) :-
                        group(G, G),
                        promote(G, Node),
                        term(G, Term),
                        notin updated(G, Term);

updated(G, Term)@next :-
                        group(G, G),
                        promote(G, Node),
                        term(G, Term);

updated(G, Term)@next :- updated(G, Term);

update_term(Node, Term)@async :-
                            group(G, G),
                            update_term(G, Term),
                            in_sync(G, Node),
                            Node !=G;

//Maintain "now" relation
now("M", 1)@1;
now("n1", 1)@1;
now("n2", 1)@1;
now("n3", 1)@1;
now("C", 1)@1;
now(Node, Time+1)@next :- now(Node, Time);

//Initialization logic - some @async are dropped here
// "establish in-sync replica set membership" as a replica
in_sync(G, M) :- 
		begin(M),
		group(M, G);

// Propagate the in-sync replica info to other replicas
in_sync(M, N) :- 
		group(G, G),
		in_sync(G, M),
		in_sync(G, N),
		M != G,
		N != G,
		notin propagate(G, M, N);

propagate(G, M, N)@next :- 	
			group(G, G),
			in_sync(G, M),
			in_sync(G, N),
			M != G;

// Propagate the in-sync replica info to client
in_sync(C, M) :- 
		group(G, G), 
		in_sync(G, M),
		client(G, C),
		notin propagate(G, C, M);

propagate(G, C, M)@next :- 	
			group(G, G),
			in_sync(G, M),
			client(G, C);

// Highest unbroken sequence number
unbroken_seq("n1", 0)@1;
unbroken_seq("n2", 0)@1;
unbroken_seq("n3", 0)@1;
