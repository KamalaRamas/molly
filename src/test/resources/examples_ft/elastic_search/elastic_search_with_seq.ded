include "group.ded";
include "elastic_edb.ded";

// At what stage are we?
// Sequence numbers for non-concurrent writes modeled
// Since only sequence numbers are checked and writes are dropped if sequence numbers match,
// we discover the inconsistency in which a non-primary has an unacknowledged write of a given 
// sequence number and therefore drops the write from primary which picks the same sequence number
// as that of unacknowledged write, leading to an inconsistency.

// General comments: 
// Queueing logic : Queuing logic has been employed in a couple of places to stagger writes and handle concurrent
// client writes
// _sent tables are typically maintaine dso a message is not sent repeatedly even if the relation that derive it 
// persist across time. They ensure that there is no retry at any stage.
// "G" is a global process that has a view of system state that other process do not.
// group is a global relation which maintains all the processes the could have ever been part of the cluster.
// member relation maintains the current in-sync replica set of the system.
// "primary" relation has an entry for each process, which identifies the primary node to each.

// Utilities
//
// Keeps track of the uncrashed nodes at every instant
uncrashed_nodes(G, Node)@next :-
				group(G, G),
				member(G, Node),            
				Node != G,
				notin crash(G, Node, _);

uncrashed_nodes(G, Node)@next :-
				group(G, G),
				member(G, Node),
				Node != G,
				crash(G, Node, Time),
				now(G, Now),
				Now < Time;

min_val(Node, min<Value>) :- 	write_queue(Node, _, _, Value);

min_nodeid(G, min<Nodeid>) :- 	
				group(G, G),
				uncrashed_nodes(G, Node),
				nodeid(G, Node, Nodeid);

max_nodeid(G, max<Nodeid>) :- 	
				group(G, G),
				uncrashed_nodes(G, Node),
				nodeid(G, Node, Nodeid);

// Find the maximum log value on a particular node
log_max(Node, X, max<Value>) :- log(Node, X, _, Value, _);

history_max(Node, max<Seq>) :- history(Node, _, _, Seq);

// WRITE QUEUE TO PROCESS CONCURRENT WRITES
//
// This ensures that a message goes out from client to one of the replicas
write_req_msg(Node, Data, Client, Value)@async :- 
						write_req(Client, Data, Node, Value),
						clients(Client);

write_queue(Node, Data, Client, Value) :- 	write_req_msg(Node, Data, Client, Value);

write_queue(Node, Data, Origin, Value)@next :- 	
						write_queue(Node, Data, Origin, Value),
						notin write_dequeue(Node, Data, Origin, Value);

write_request(Node, Data, Origin, Value) :- 	
						write_queue(Node, Data, Origin, Value),
						min_val(Node, Value);                         // Process request with the lowest value first

write_dequeue(Node, Data, Origin, Value) :- 	write_request(Node, Data, Origin, Value);

write_dequeue(Node, Data, Origin, Value)@next :- write_dequeue(Node, Data, Origin, Value);

// ROUTE TO PRIMARY 
// When a request on a non-primary, it is forwarded on to the primary. Since there is no retry logic, we keep track of acknowledgements 
// have been sent out(chain_ack_sent) in order to send out each acknowledgement exactly once. 
// 
write_request(Primary, Data, M, Value)@async :-	
						write_request(M, Data, _, Value),
						primary(M, Primary),
						Primary != M;

send_ack_to(M, Origin, Value)@next :-
					write_request(M, _, Origin, Value), 
					primary(M, Primary),
					Primary != M;

send_ack_to(M, Origin, Value)@next :- 	send_ack_to(M, Origin, Value);

//
// PRIMARY TO REPLICAS.
//
//When a write_request appears on the primary, for every other replica alive in the system, add to the "replica_write_queue".
replica_write_queue(Primary, Data, Other, Value, Seq, Nodeid) :-
								write_request_seq(Primary, Data, _, Value, Seq),
								member(Primary, Other),
								Other != Primary,
								primary(Primary, Primary),
								nodeid(Primary, Other, Nodeid);

// NEW PRIMARY TO REPLICAS - in case of primary promotion
// In case of a primary promotion, all writes logged on the new primary are propagated to all in-sync replicas
replica_write_queue(Node, Data, Other, Value, Seq, Nodeid) :- 	
								log(Node, Data, _, Value, Seq),
								member(Node, Other),
								Other != Node,
								primary_to_be(Node),
								nodeid(Node, Other, Nodeid);

primary_to_be(Node)@async :- 	
				promote(G, Node),
				member(G, Node);

// Replica writes are staggered.
// This is a priority queue implementation

// Process the write_request with smallest value first, followed by write with smallest nodeid
min_replica_val(Node, min<Seq>) :-
					member(Node, Node),
					replica_write_queue(Node, _, _, _, Seq, _);

min_replica_val(Node, 0) :- 
				member(Node, Node),
				notin replica_write_queue(Node, _, _, _, _, _);

min_replica_node( Node, min<Nodeid>) :- 
					member(Node, Node),
					min_replica_val(Node, Seq),
					Seq != 0,
					replica_write_queue(Node, _, _, _, Seq, Nodeid);

min_replica_node( Node, 0) :- 
				member(Node, Node),
				min_replica_val(Node, Seq), Seq == 0;

replica_write(Other, Data, Primary, Value, Seq, Nodeid)@async :- 
								replica_write_queue(Primary, Data, Other, Value, Seq, Nodeid),
								min_replica_val(Primary, Seq),
								primary(Primary, Primary),
								min_replica_node(Primary, Nodeid);

// Based on the request selected for processing, dequeue appropriately. 
replica_write_dequeue(Primary, Data, Other, Value, Seq, Nodeid) :- 
									replica_write_queue(Primary, Data, Other, Value, Seq, Nodeid),
									min_replica_val(Primary, Seq),
									primary(Primary, Primary),
									min_replica_node(Primary, Nodeid);

// This rule in particular is to purge all replica writes cached when the primary node changes/fails
//
replica_write_dequeue(Node, Data, Origin, Value, Seq, Nodeid)@next :- 
									replica_write_queue(Node, Data, Origin, Value, Seq, Nodeid),
									notin primary(Node, Node),
									notin primary_to_be(Node),
									Node != "G";

replica_write_dequeue(Node, Data, Origin, Value, Seq, Nodeid)@next :- replica_write_dequeue(Node, Data, Origin, Value, Seq, Nodeid);

// The request queue consists all queued requests excluding the ones that have been dequeued
replica_write_queue(Node, Data, Origin, Value, Seq, Nodeid)@next :- 
									replica_write_queue(Node, Data, Origin, Value, Seq, Nodeid),
									notin replica_write_dequeue(Node, Data, Origin, Value, Seq, Nodeid);

// LOGGING WRITES
// A write is logged at the primary at the same time replica writes are queued and at the replicas when the replica_write is received.
//
log(Node, Data, Origin, Value, Seq) :- replica_write(Node, Data, Origin, Value, Seq, _);
log(Node, Data, Origin, Value, Seq) :- write_request_seq(Node, Data, Origin, Value, Seq), primary(Node, Node);
log(Node, Data, Origin, Value, Seq)@next :- log(Node, Data, Origin, Value, Seq);

//
// ACKNOWLEDGEMENT LOGIC
//
// As soon as a replica_write is received from primary, it is acknowledged. 
ack_int(Origin, Data, Replica, Value, Seq)@async :- 	
							replica_write(Replica, Data, Origin, Value, Seq, _);

// Before a primary can acknowledge a write, it must receive acknowledgements from all replicas. The following 3 rules ensure the same.
missing_ack(Primary, Data, Other, Value, Seq) :- 	
							log(Primary, Data, _, Value, Seq),
							member(Primary, Other),
							Primary != Other,
							notin ack_int(Primary, Data, Other, Value, Seq);

chain_ack(Origin, Data, Acker, Value, Seq)@async :- 	
							log(Acker, Data, Origin, Value, Seq),
							notin missing_ack(Acker, Data, _, Value, Seq),
							notin chain_ack_sent(Acker, Data, Origin, Value, Seq);

chain_ack_sent(Acker, Data, Origin, Value, Seq)@next :- 
							log(Acker, Data, Origin, Value, Seq),
							notin missing_ack(Acker, Data, _, Value, Seq);

// Acknowledgement retrace the forwarding path of the write request
chain_ack(Origin, Data, Acker, Value, Seq)@async :- 
							log(Acker, Data, _, Value, Seq),
							chain_ack(Acker, Data, _, Value, Seq),
							send_ack_to(Acker, Origin, Value),
							notin chain_ack_sent(Acker, Data, Origin, Value, Seq);

chain_ack_sent(Acker, Data, Origin, Value, Seq)@next :- 
							log(Acker, Data, _, Value, Seq),
							chain_ack(Acker, Data, _, Value, Seq),
							send_ack_to(Acker, Origin, Value);

// Acknowledgements persist across time. If a chain_ack is received at a client, the write is acknowledged.
ack(Origin, Data, Acker, Value, Seq) :- 
					chain_ack(Origin, Data, Acker, Value, Seq),
					clients(Origin);
 
chain_ack(Origin, Data, Acker, Value, Seq)@next :- chain_ack(Origin, Data, Acker, Value, Seq);

ack_int(Origin, Data, Acker, Value, Seq)@next :- ack_int(Origin, Data, Acker, Value, Seq);

ack(Origin, Data, Acker, Value, Seq)@next :- ack(Origin, Data, Acker, Value, Seq);

//Append sequence number to write request
write_request_seq(Primary, Data, Origin, Value, Seq) :-	
							write_request(Primary, Data, Origin, Value),
							primary(Primary, Primary),
							seq(Primary, Seq);

// Update sequence number on primary
seq(Primary, Seq+1)@next :-	
				primary(Primary, Primary),
				seq(Primary, Seq),
				write_request_seq(Primary, _, _, _, Seq);

seq(Primary, Seq)@next :- 	
				primary(Primary, Primary),
				seq(Primary, Seq),
				notin write_request_seq(Primary, _, _, _, _);

// Log writes to contain the sequence number too - History relation
// The "int_history" relation checks if the sequence number corresponding to 
// the write is looged and only logs the request if not
history(Node, Data, Origin, Seq)@next :- int_history(Node, Data, Origin, Seq);

inti_history(Node, Data, Origin, Seq) :- 
				write_request_seq(Node, Data, Origin, _, Seq),
				primary(Node, Node), notin history(Node, _, _, Seq);

int_history(Node, Data, Origin, Seq) :- 
				replica_write(Node, Data, Origin, _, Seq, _), 
				notin history(Node, _, _, Seq);

history(Node, Data, Origin, Seq) :-	
					ack(Node, Data, Origin, _, Seq),
					clients(Node);

// History persists across time
history(Node, Data, Origin, Seq)@next :- history(Node, Data, Origin, Seq);
