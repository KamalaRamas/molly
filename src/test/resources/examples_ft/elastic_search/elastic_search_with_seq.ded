include "group.ded";
include "elastic_edb.ded";

// At what stage are we?
// Sequence numbers for non-concurrent writes modeled
// Since only sequence numbers are checked and writes are dropped if sequence numbers match,
// we discover the inconsistency in which a non-primary has an unacknowledged write of a given 
// sequence number and therefore drops the write from primary which picks the same sequence number
// as that of unacknowledged write, leading to an inconsistency.

// General comments: 
// Queueing logic : Queuing logic has been employed in a couple of places to stagger writes and handle concurrent
// client writes
// _sent tables are typically maintaine dso a message is not sent repeatedly even if the relation that derive it 
// persist across time. They ensure that there is no retry at any stage.
// "G" is a global process that has a view of system state that other process do not.
// group is a global relation which maintains all the processes the could have ever been part of the cluster.
// member relation maintains the current in-sync replica set of the system.
// "primary" relation has an entry for each process, which identifies the primary node to each.

// Utilities
//
// Keeps track of the uncrashed nodes at every instant
uncrashed_nodes(G, Node)@next :-
				group(G, G),
				member(G, Node),            
				Node != G,
				notin crash(G, Node, _);

uncrashed_nodes(G, Node)@next :-
				group(G, G),
				member(G, Node),
				Node != G,
				crash(G, Node, Time),
				now(G, Now),
				Now < Time;

min_val(Node, min<Value>) :- 	write_queue(Node, _, _, Value);

min_nodeid(G, min<Nodeid>) :- 	
				group(G, G),
				uncrashed_nodes(G, Node),
				nodeid(G, Node, Nodeid);

max_nodeid(G, max<Nodeid>) :- 	
				group(G, G),
				uncrashed_nodes(G, Node),
				nodeid(G, Node, Nodeid);

// Find the maximum log value on a particular node
log_max(Node, X, max<Value>) :- log(Node, X, _, Value, _, _);

term_max(Node, max<Term>) :- member(Node, Node), history(Node, _, Term, _);
seq_max(Node, max<Seq>) :- member(Node, Node), term_max(Node, Term), history(Node, _, Term, Seq);

// WRITE QUEUE TO PROCESS CONCURRENT WRITES
//
// This ensures that a message goes out from client to one of the replicas
write_request_incoming(Node, Data, Client, Value)@async :- 
			                        			write_request_outgoing(Client, Data, Node, Value),
						                        clients(Client);

write_queue(Node, Data, Client, Value) :- 	write_request_incoming(Node, Data, Client, Value);

write_queue(Node, Data, Origin, Value)@next :- 	
						write_queue(Node, Data, Origin, Value),
						notin write_dequeue(Node, Data, Origin, Value);

write_request_processing(Node, Data, Origin, Value) :- 	
						        write_queue(Node, Data, Origin, Value),
						        min_val(Node, Value);                         // Process request with the lowest value first

write_dequeue(Node, Data, Origin, Value) :- 	write_request_processing(Node, Data, Origin, Value);

write_dequeue(Node, Data, Origin, Value)@next :- write_dequeue(Node, Data, Origin, Value);

// ROUTE TO PRIMARY 
// When a request on a non-primary, it is forwarded on to the primary. Since there is no retry logic, we keep track of acknowledgements 
// have been sent out(chain_ack_sent) in order to send out each acknowledgement exactly once. 
// 
write_request_processing(Primary, Data, M, Value)@async :-	
						                write_request_processing(M, Data, _, Value),
						                primary(M, Primary),
						                Primary != M;

send_response_to(M, Origin, Value)@next :-
					write_request_processing(M, _, Origin, Value), 
					primary(M, Primary),
					Primary != M;

send_response_to(M, Origin, Value)@next :- 	send_response_to(M, Origin, Value);

//Append sequence number to write request
write_request_seq_processing(Primary, Data, Origin, Value, Term,  Seq) :-	
							            write_request_processing(Primary, Data, Origin, Value),
							            primary(Primary, Primary),
							            seq(Primary, Seq),
                                        term(Primary, Term);

//
// PRIMARY TO REPLICAS.
//
//When a write_request appears on the primary, for every other replica alive in the system, add to the "replica_write_queue".
replica_write_queue(Primary, Data, Other, Value, Term, Seq, Nodeid) :-
								write_request_seq_processing(Primary, Data, _, Value, Term, Seq),
								member(Primary, Other),
								Other != Primary,
								primary(Primary, Primary),
								nodeid(Primary, Other, Nodeid);

// Replica writes are staggered.
// This is a priority queue implementation

// Process the write_request with smallest value first, followed by write with smallest nodeid
min_replica_val(Node, min<Seq>) :-
					member(Node, Node),
					replica_write_queue(Node, _, _, _, _, Seq, _);

min_replica_val(Node, 0) :- 
				member(Node, Node),
				notin replica_write_queue(Node, _, _, _, _, _, _);

min_replica_node( Node, min<Nodeid>) :- 
					member(Node, Node),
					min_replica_val(Node, Seq),
					Seq != 0,
					replica_write_queue(Node, _, _, _, _, Seq, Nodeid);

min_replica_node( Node, 0) :- 
				member(Node, Node),
				min_replica_val(Node, Seq), Seq == 0;

replica_write_request_outgoing(Primary, Data, Other, Value, Term, Seq, Nodeid) :- 
								replica_write_queue(Primary, Data, Other, Value, Term, Seq, Nodeid),
								min_replica_val(Primary, Seq),
								primary(Primary, Primary),
								min_replica_node(Primary, Nodeid);

replica_write_request_incoming(Other, Data, Primary, Value, Term, Seq, Nodeid)@async :-
                                replica_write_request_outgoing(Primary, Data, Other, Value, Term, Seq, Nodeid);

// Based on the request selected for processing, dequeue appropriately. 
replica_write_dequeue(Primary, Data, Other, Value, Term, Seq, Nodeid) :- 
                                replica_write_request_outgoing(Primary, Data, Other, Value, Term, Seq, Nodeid);

// This rule in particular is to purge all replica writes cached when the primary node changes/fails
//
replica_write_dequeue(Node, Data, Origin, Value, Term, Seq, Nodeid)@next :- 
									replica_write_queue(Node, Data, Origin, Value, Term, Seq, Nodeid),
									notin primary(Node, Node),
									notin primary_to_be(Node),
									Node != "G";

replica_write_dequeue(Node, Data, Origin, Value, Term, Seq, Nodeid)@next :- 
                                    replica_write_dequeue(Node, Data, Origin, Value, Term, Seq, Nodeid);

// The request queue consists all queued requests excluding the ones that have been dequeued
replica_write_queue(Node, Data, Origin, Value, Term, Seq, Nodeid)@next :- 
									replica_write_queue(Node, Data, Origin, Value, Term, Seq, Nodeid),
									notin replica_write_dequeue(Node, Data, Origin, Value, Term, Seq, Nodeid);

// NEW PRIMARY TO REPLICAS - in case of primary promotion
// This is part of the new resync logic and therefore, takes a different processing path than regualr replica_writes
// The following code is largely similar to the previous queue based processing logic, but the entries have some extra
// attributes to account for the fact that we are re-syncing the older entries in a new term
// In case of a primary promotion, all writes logged on the new primary are propagated to all in-sync replicas
resync_replica_write_queue(Node, Data, Other, Value, Term, Seq, Nodeid, Primaryterm) :- 	
								log(Node, Data, _, Value, Term, Seq),
								member(Node, Other),
								Other != Node,
								primary_to_be(Node),
                                resync_now(Node),
                                term(Node, Primaryterm),
								nodeid(Node, Other, Nodeid);

// The following logic is to couple the change in the primary term sending out the resync messages.
// We only want to send the resync messages once the primary term has been updated.
// This logic may be a bit fragile: changes to the promote relation will directly impact the coupling
max_updated(G, max<Term>) :-
            group(G, G),
            update_term(G, Term);

primary_term_compare(Node, Globalterm)@async :-
                            max_updated(G, Globalterm),
                            promote(G, Node);

primary_term_compare(Node, Term)@next :-
                            primary_term_compare(Node, Term);

resync_now(Node) :-
                primary_term_compare(Node, Globalterm), 
                term(Node, Term),
                Globalterm == Term;

primary_to_be(Node)@async :- 	
				promote(G, Node),
				member(G, Node);

primary_to_be(Node)@next :-
                member(Node, Node),
                primary_to_be(Node),
                notin primary(Node, Node);

// Resync Replica writes are staggered.
// This is a priority queue implementation

// Process the write_request with smallest value first, followed by write with smallest nodeid
resync_min_replica_val(Node, min<Seq>) :-
					member(Node, Node),
					resync_replica_write_queue(Node, _, _, _, _, Seq, _, _);

resync_min_replica_val(Node, 0) :- 
				member(Node, Node),
				notin resync_replica_write_queue(Node, _, _, _, _, _, _, _);

resync_min_replica_node( Node, min<Nodeid>) :- 
					member(Node, Node),
					resync_min_replica_val(Node, Seq),
					Seq != 0,
					resync_replica_write_queue(Node, _, _, _, _, Seq, Nodeid, _);

resync_min_replica_node( Node, 0) :- 
				    member(Node, Node),
				    resync_min_replica_val(Node, Seq),
                    Seq == 0;

resync_replica_write_request_outgoing(Primary, Data, Other, Value, Term, Seq, Nodeid, Primaryterm) :- 
								resync_replica_write_queue(Primary, Data, Other, Value, Term, Seq, Nodeid, Primaryterm),
								resync_min_replica_val(Primary, Seq),
								primary(Primary, Primary),
								resync_min_replica_node(Primary, Nodeid);

resync_replica_write_request_incoming(Other, Data, Primary, Value, Term, Seq, Nodeid, Primaryterm)@async :-
                                resync_replica_write_request_outgoing(Primary, Data, Other, Value, Term, Seq, Nodeid, Primaryterm);

// Based on the request selected for processing, dequeue appropriately. 
resync_replica_write_dequeue(Primary, Data, Other, Value, Term, Seq, Nodeid, Primaryterm) :- 
                                resync_replica_write_request_outgoing(Primary, Data, Other, Value, Term, Seq, Nodeid, Primaryterm);

resync_replica_write_dequeue(Node, Data, Origin, Value, Term, Seq, Nodeid, Primaryterm)@next :- 
                                    resync_replica_write_dequeue(Node, Data, Origin, Value, Term, Seq, Nodeid, Primaryterm);

// The request queue consists all queued requests excluding the ones that have been dequeued
resync_replica_write_queue(Node, Data, Origin, Value, Term, Seq, Nodeid, Primaryterm)@next :- 
									resync_replica_write_queue(Node, Data, Origin, Value, Term, Seq, Nodeid, Primaryterm),
									notin resync_replica_write_dequeue(Node, Data, Origin, Value, Term, Seq, Nodeid, Primaryterm);

// LOGGING WRITES
// A write is logged at the primary at the same time replica writes are queued and at the replicas when the replica_write is received.
// While logging writes, we only process incoming requests if the term number of the request is greater than or equsl to that of the 
// node at which the request is being processed.
log(Node, Data, Origin, Value, Term, Seq) :- 
                                        replica_write_request_incoming(Node, Data, Origin, Value, Term, Seq, _),
                                        term(Node, Curterm), 
                                        Curterm < Term;

log(Node, Data, Origin, Value, Term, Seq) :- 
                                        replica_write_request_incoming(Node, Data, Origin, Value, Term, Seq, _),
                                        term(Node, Curterm), 
                                        Curterm == Term;

log(Node, Data, Origin, Value, Term, Seq) :- 
                                        write_request_seq_processing(Node, Data, Origin, Value, Term, Seq),
                                        primary(Node, Node),
                                        term(Node, Curterm),
                                        Curterm < Term;

log(Node, Data, Origin, Value, Term, Seq) :- 
                                        write_request_seq_processing(Node, Data, Origin, Value, Term, Seq),
                                        primary(Node, Node),
                                        term(Node, Curterm),
                                        Curterm == Term;

log(Node, Data, Origin, Value, Term, Seq) :- 
                                        resync_replica_write_request_incoming(Node, Data, Origin, Value, Term, Seq, _, Primaryterm),
                                        term(Node, Curterm), 
                                        Curterm < Primaryterm;

log(Node, Data, Origin, Value, Term, Seq) :- 
                                        resync_replica_write_request_incoming(Node, Data, Origin, Value, Term, Seq, _, Primaryterm),
                                        term(Node, Curterm), 
                                        Curterm == Primaryterm;

log(Node, Data, Origin, Value, Term, Seq)@next :- log(Node, Data, Origin, Value, Term, Seq);

//
// ACKNOWLEDGEMENT LOGIC
//
// As soon as a replica_write is received from primary, it is acknowledged.
// Any write_request that is received but ignored due to an older term# is not acknowledged
replica_write_response_outgoing(Origin, Data, Replica, Value, Term, Seq)@async :- 	
							replica_write_request_incoming(Replica, Data, Origin, Value, Term, Seq, _),
                            term(Node, Curterm),
                            Curterm < Term;

replica_write_response_outgoing(Origin, Data, Replica, Value, Term, Seq)@async :- 	
							replica_write_request_incoming(Replica, Data, Origin, Value, Term, Seq, _),
                            term(Node, Curterm),
                            Curterm == Term;

ack_int(Origin, Data, Replica, Value, Term, Seq)@next :-
                            replica_write_response_outgoing(Origin, Data, Replica, Value, Term, Seq);

// Before a primary can acknowledge a write, it must receive acknowledgements from all replicas. The following 3 rules ensure the same.
missing_ack(Primary, Data, Other, Value, Term, Seq) :- 	
							log(Primary, Data, _, Value, Term, Seq),
							member(Primary, Other),
							Primary != Other,
							notin ack_int(Primary, Data, Other, Value, Term, Seq);

write_response_outgoing(Origin, Data, Acker, Value, Term, Seq)@async :- 	
							log(Acker, Data, Origin, Value, Term, Seq),
							notin missing_ack(Acker, Data, _, Value, Term, Seq),
							notin write_response_sent(Acker, Data, Origin, Value, Term, Seq);

write_response_sent(Acker, Data, Origin, Value, Term, Seq)@next :- 
							log(Acker, Data, Origin, Value, Term, Seq),
							notin missing_ack(Acker, Data, _, Value, Term, Seq);

// Acknowledgement retrace the forwarding path of the write request
write_response_outgoing(Origin, Data, Acker, Value, Term, Seq)@async :- 
							log(Acker, Data, _, Value, Term, Seq),
							chain_ack(Acker, Data, _, Value, Term, Seq),
							send_response_to(Acker, Origin, Value),
							notin write_response_sent(Acker, Data, Origin, Value, Term, Seq);

write_response_sent(Acker, Data, Origin, Value, Term, Seq)@next :- 
							log(Acker, Data, _, Value, Term, Seq),
							chain_ack(Acker, Data, _, Value, Term, Seq),
							send_response_to(Acker, Origin, Value);

chain_ack(Origin, Data, Acker, Value, Term, Seq)@next :-
                                        write_response_outgoing(Origin, Data, Acker, Value, Term, Seq);

// Acknowledgements persist across time. If a chain_ack is received at a client, the write is acknowledged.
ack(Origin, Data, Acker, Value, Term, Seq) :-
					chain_ack(Origin, Data, Acker, Value, Term, Seq),
					clients(Origin);
 
chain_ack(Origin, Data, Acker, Value, Term, Seq)@next :- chain_ack(Origin, Data, Acker, Value, Term, Seq);

ack_int(Origin, Data, Acker, Value, Term, Seq)@next :- ack_int(Origin, Data, Acker, Value, Term, Seq);

ack(Origin, Data, Acker, Value, Term, Seq)@next :- ack(Origin, Data, Acker, Value, Term, Seq);

// Update sequence number on primary
seq(Primary, Seq+1)@next :-
				primary(Primary, Primary),
				seq(Primary, Seq),
				write_request_seq_processing(Primary, _, _, _, _, Seq);

// We do not expect the following two rules to fire, but they are here for completeness

// This rule states that if somehow the write_request received a sequence number 
// greater than the current sequence number, icrement the higher sequence number
seq(Primary, Seq2+1)@next :-
				primary(Primary, Primary),
				seq(Primary, Seq1),
				write_request_seq_processing(Primary, _, _, _, _, Seq2),
                Seq2 > Seq1;

// The following rule seems even more unlikely than the last. The write_request
// should never receive a sequence number less than that which the primary
// knows off. If by some derivation it does, however, stick with the higher
// known sequence number
seq(Primary, Seq1)@next :-
				primary(Primary, Primary),
				seq(Primary, Seq1),
				write_request_seq_processing(Primary, _, _, _, _, Seq2),
                Seq2 < Seq1;

seq(Primary, Seq)@next :- 	
				primary(Primary, Primary),
				seq(Primary, Seq),
				notin write_request_seq_processing(Primary, _, _, _, _, _);

// If the incoming write request has a term# >= Current term# on the node, the request is logged.
history(Node, Data, Term, Seq) :-
                write_request_seq_processing(Node, Data, _, _, Term, Seq),
                primary(Node, Node),
                term(Node, Curterm),
                Curterm < Term;

history(Node, Data, Term, Seq) :-
                write_request_seq_processing(Node, Data, _, _, Term, Seq),
                primary(Node, Node),
                term(Node, Curterm),
                Curterm == Term;

history(Node, Data, Term, Seq) :-
                replica_write_request_incoming(Node, Data, _, _, Term, Seq, _),
                term(Node, Curterm),
                Curterm < Term;

history(Node, Data, Term, Seq) :-
                replica_write_request_incoming(Node, Data, _, _, Term, Seq, _),
                term(Node, Curterm),
                Curterm == Term;

history(Node, Data, Term, Seq) :- 
                resync_replica_write_request_incoming(Node, Data, _, _, Term, Seq, _, Primaryterm),
                term(Node, Curterm), 
                Curterm < Primaryterm;

history(Node, Data, Term, Seq) :- 
                resync_replica_write_request_incoming(Node, Data, _, _, Term, Seq, _, Primaryterm),
                term(Node, Curterm),
                Curterm == Primaryterm;

history(Node, Data, Term, Seq) :-
				ack(Node, Data, _, _, Term, Seq),
				clients(Node);

// History persists across time
history(Node, Data, Term, Seq)@next :- 
                        history(Node, Data, Term, Seq),
                        notin erase_history(Node, Data, Term, Seq);

// Keep track of highest sequence numbers
highest_history_seq(Node, max<Seq>) :-
                        member(Node, Node),
                        history(Node, _, _, Seq);

highest_history_seq(Node, 0) :-
                        member(Node, Node),
                        notin history(Node, _, _, _);

unbroken_seq(Node, Seq1)@next :-
                    unbroken_seq(Node, Seq1),
                    highest_history_seq(Node, Seq2),
                    Seq2 != Seq1 + 1;

unbroken_seq(Node, Seq2)@next :-
                    unbroken_seq(Node, Seq1),
                    highest_history_seq(Node, Seq2),
                    Seq2 == Seq1 + 1;

trim(Other, Trimseq) :-
                    resync_now(Node),
                    primary_to_be(Node),
                    unbroken_seq(Node, Trimseq),
                    member(Node, Other), 
                    Other != "G",
                    Node != Other;

erase_history(Node, Data, Term, Seq) :-
                    history(Node, Data, Term, Seq),
                    trim(Node, Trimseq),
                    Seq > Trimseq;

erase_history(Node, Data, Term, Seq)@next :-
                    erase_history(Node, Data, Term, Seq);
